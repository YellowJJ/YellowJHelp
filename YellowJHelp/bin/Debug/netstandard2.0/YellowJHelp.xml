<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YellowJHelp</name>
    </assembly>
    <members>
        <member name="T:YellowJHelp.Entry.FastMapper">
             <summary>
              高性能对象映射器（Mapster风格，支持属性名匹配、类型兼容、集合映射、嵌套对象、缓存优化，兼容netstandard2.0）
             </summary>
             优势与市场主流对比
            自动属性名匹配、类型兼容、集合/嵌套递归：无需配置，适合绝大多数DTO/VO/POCO映射。
            性能高：表达式树+委托缓存，和Mapster/AutoMapper同级，远高于反射。
            零依赖、轻量级：无外部包，兼容netstandard2.0，适合微服务、工具库、性能敏感场景。
            Mapster/AutoMapper：支持复杂配置、条件映射、自定义规则、深度嵌套、集合等，适合复杂业务。
            本实现：专注零配置、自动递归、类型安全，适合绝大多数常规对象映射，维护成本低。
        </member>
        <member name="M:YellowJHelp.Entry.FastMapper.Adapt``2(``0)">
            <summary>
            将源对象映射为新对象（Mapster风格，source.Adapt&lt;TTarget&gt;()）
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <returns>新目标对象</returns>
            <remarks>
            优势：
            1. 用法与Mapster一致，支持 source.Adapt&lt;TTarget&gt;()。
            2. 支持属性名自动匹配、类型自动转换、嵌套对象、集合递归映射。
            3. 性能高，表达式树+委托缓存，适合高并发。
            4. 兼容netstandard2.0，无外部依赖。
            5. 轻量级，易维护，适合DTO/VO/POCO等常规对象映射。
            
            与市场主流对比：
            - Mapster/AutoMapper支持复杂配置、条件映射、自定义规则、深度嵌套、集合等，适合复杂业务。
            - 本实现专注于零配置、自动属性名匹配、类型兼容、集合/嵌套对象自动递归，适合绝大多数DTO/VO场景。
            - 性能与Mapster接近，远高于反射，零依赖，适合对性能和体积有要求的项目。
            </remarks>
        </member>
        <member name="M:YellowJHelp.Entry.FastMapper.Adapt``2(``0,``1)">
            <summary>
            将源对象映射到已存在的目标对象（属性覆盖，source.Adapt(dest)）
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="destination">目标对象（属性会被覆盖）</param>
            <returns>目标对象（同传入实例）</returns>
            <remarks>
            - 用法与Mapster一致，支持 source.Adapt(dest)。
            - 只会覆盖目标对象中与源对象同名且类型兼容的属性。
            - 适合更新已有对象（如EF实体、ViewModel等）。
            </remarks>
        </member>
        <member name="M:YellowJHelp.Entry.FastMapper.Adapt``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将源集合映射为目标集合（Mapster风格，sources.Adapt&lt;List&lt;TTarget&gt;&gt;()）
            </summary>
            <typeparam name="TSource">源集合元素类型</typeparam>
            <typeparam name="TTarget">目标集合元素类型</typeparam>
            <param name="sourceList">源集合</param>
            <returns>目标集合</returns>
        </member>
        <member name="M:YellowJHelp.Entry.FastMapper.AdaptTo``1(System.Object)">
            <summary>
            自动推断源类型的简化映射方法（仅需指定目标类型）
            </summary>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <returns>目标对象</returns>
            <remarks>
            仅建议在开发便利性优先、非极致性能场景下使用。
            </remarks>
        </member>
        <member name="T:YellowJHelp.Entry.LogInfo">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.LogInfo.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.LogInfo.Number">
            <summary>
            编码(日志记录自动生成记录编码-不用传值)
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.LogInfo.Date">
            <summary>
            创建时间（日志记录自动生成当前日期-不用传值）
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.LogInfo.State">
            <summary>
            状态级
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.LogInfo.ElapsedTime">
            <summary>
            耗时
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.LogInfo.Source">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.LogInfo.SourceCode">
            <summary>
            来源编码
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.LogInfo.SourceName">
            <summary>
            来源名称
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.LogInfo.Acceptor">
            <summary>
            接收值
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.LogInfo.Returbed">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:YellowJHelp.Entry.SnowflakeIdGenerator">
            <summary>
            雪花算法ID生成器
            </summary>
        </member>
        <member name="M:YellowJHelp.Entry.SnowflakeIdGenerator.NextId">
            <summary>
            生成雪花ID
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:YellowJHelp.Entry.YAllocationInfo">
            <summary>
            数据分配类
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.YAllocationInfo.Number">
            <summary>
            数据唯一标识
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.YAllocationInfo.Key">
            <summary>
            分配标识：分配对比条件
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.YAllocationInfo.Qty">
            <summary>
            分配数量/可分配数量
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.YAllocationInfo.RemQty">
            <summary>
            分配数量计算重点：剩余数量：请必填
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.YAllocationInfo.AQty">
            <summary>
            已分配数量
            </summary>
        </member>
        <member name="P:YellowJHelp.Entry.YAllocationInfo.FPNumber">
            <summary>
            已分配标识
            </summary>
        </member>
        <member name="T:YellowJHelp.IServer.IYJHelp">
            <summary>
            通用帮助方法
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.message">
            <summary>
            消息注明
            </summary>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.MD5EncryptAsync(System.String,System.Boolean)">
            <summary>
            32位MD5加密
            </summary>
            <param name="strText">要加密字符串</param>
            <param name="IsLower">是否以小写方式返回</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.EncodeAsync(System.String,System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="data">需要加密的值</param>
            <param name="KEY_64">密钥长度8位</param>
            <param name="IV_64">密钥长度8位</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.DecodeAsync(System.String,System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="data">需要加密的值</param>
            <param name="KEY_64">密钥长度8位</param>
            <param name="IV_64">密钥长度8位</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.YJSha256Async(System.String)">
            <summary>
            SHA256哈希加密（异步，返回64位小写十六进制字符串）
            </summary>
            <param name="text">要加密的字符串</param>
            <returns>SHA256哈希值（64位小写十六进制字符串）</returns>
            <remarks>
            1. 适用于数据签名、完整性校验等场景。
            2. 不可逆，仅用于校验和签名，不可解密。
            3. 异步实现，适合Web和高并发场景。
            </remarks>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.YJAesEncryptAsync(System.String,System.String,System.String)">
            <summary>
            AES加密（异步，CBC模式，PKCS7填充，返回Base64字符串）
            </summary>
            <param name="plainText">明文</param>
            <param name="key">密钥（16/24/32字节，建议32字节）</param>
            <param name="iv">初始向量（16字节）</param>
            <returns>加密后的Base64字符串</returns>
            <remarks>
            1. 支持AES-128/192/256，key长度分别为16/24/32字节。
            2. IV必须为16字节，建议随机生成并安全保存。
            3. 适用于敏感数据加密传输、存储等场景。
            4. 异步实现，适合Web和高并发场景。
            </remarks>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.YJAesDecryptAsync(System.String,System.String,System.String)">
            <summary>
            AES解密（异步，CBC模式，PKCS7填充，输入Base64字符串）
            </summary>
            <param name="cipherText">密文（Base64字符串）</param>
            <param name="key">密钥（16/24/32字节，建议32字节）</param>
            <param name="iv">初始向量（16字节）</param>
            <returns>解密后的明文</returns>
            <remarks>
            1. 密钥和IV需与加密时一致。
            2. 解密失败返回空字符串。
            3. 异步实现，适合Web和高并发场景。
            </remarks>
        </member>
        <member name="T:YellowJHelp.IServer.IYJHelp.ICache">
            <summary>
            缓存类
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.ICache.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.ICache.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T">接收实体</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.ICache.Exsits(System.String)">
            <summary>
            判断缓存是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.ICache.Clear(System.String)">
            <summary>
            删除对应缓存
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.ICache.Clear">
            <summary>
            删除所有缓存
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.YellowJLogAsync(System.String,System.String,System.String,System.String)">
            <summary>
            文件流日志记录
            </summary>
            <param name="text">参数</param>
            <param name="address">新建文件名（地址）</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.SetCookies(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,System.Int32)">
            <summary>
            设置本地cookie
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="key">键</param>
            <param name="value">值</param>  
            <param name="minutes">过期时长，单位：分钟</param>      
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.DeleteCookies(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            删除指定的cookie
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="key">键</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.GetCookies(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            获取cookies
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="key">键</param>
            <returns>返回对应的值</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.SessionAdd(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Byte[])">
            <summary>
            添加Session
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValue">Session值</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.SessionGet(Microsoft.AspNetCore.Http.HttpContext,System.Threading.CancellationToken)">
            <summary>
            获取Session
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.SessionDel(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            删除Session
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="strSessionName">Session对象名称</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.IsString(System.String,System.String)">
            <summary>
            string中是否包含某个值
            </summary>
            <param name="data">数据包</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.YAlloctionlist(System.Collections.Generic.List{YellowJHelp.Entry.YAllocationInfo},System.Collections.Generic.List{YellowJHelp.Entry.YAllocationInfo})">
            <summary>
            分配数据
            </summary>
            <param name="yAllocations">分配集合</param>
            <param name="yAllocations1">被分配集合</param>
            <returns>返回分配集合（剩余），被分配集合（已分），分配结果详情</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.YAlloctionlistThred(System.Collections.Generic.List{YellowJHelp.Entry.YAllocationInfo},System.Collections.Generic.List{YellowJHelp.Entry.YAllocationInfo})">
            <summary>
            分配数据-多线程
            </summary>
            <param name="yAllocations">分配集合</param>
            <param name="yAllocations1">被分配集合</param>
            <returns>返回分配集合（剩余），被分配集合（已分），分配结果详情</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.NextId(System.Int64)">
            <summary>
            生成雪花ID
            </summary>
            <param name="workerId">工作者的标识</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.IsDateInTargetMonth(System.DateTime,System.DateTime)">
            <summary>
            日期是否在目标年月内
            </summary>
            <param name="date">输入日期</param>
            <param name="targetDate">目标日期</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.ToDictAsync``2(System.Collections.Generic.List{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            异步将List集合根据指定键选择器生成字典，便于快速查找
            </summary>
            <typeparam name="TSource">集合元素类型</typeparam>
            <typeparam name="TKey">字典Key类型</typeparam>
            <param name="list">要转换的集合</param>
            <param name="keySelector">用于获取Key的委托（如：item => item.Key）</param>
            <param name="allowDuplicate">是否允许重复Key（true时后者覆盖前者，false时遇到重复抛异常）</param>
            <returns>以指定Key为键的字典</returns>
            <exception cref="T:System.ArgumentNullException">参数为空时抛出</exception>
            <exception cref="T:System.ArgumentException">存在重复Key且不允许重复时抛出,默认允许重复</exception>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.ToDictAsync``2(System.Collections.Generic.List{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)">
            <summary>
            异步将List集合根据指定集合Key选择器生成字典，支持Key为集合类型（如List&lt;string&gt;），便于快速查找
            </summary>
            <typeparam name="TSource">集合元素类型</typeparam>
            <typeparam name="TKeyItem">集合Key的元素类型</typeparam>
            <param name="list">要转换的集合</param>
            <param name="keySelector">用于获取集合Key的委托（如：item => item.Number）</param>
            <param name="allowDuplicate">是否允许重复Key（true时后者覆盖前者，false时遇到重复抛异常）</param>
            <returns>以集合Key为键的字典（Key为集合的唯一字符串表示）</returns>
            <exception cref="T:System.ArgumentNullException">参数为空时抛出</exception>
            <exception cref="T:System.ArgumentException">存在重复Key且不允许重复时抛出，默认允许重复</exception>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.Copy``1(``0)">
            <summary>
            对象副本
            </summary>
            <param name="data">数据</param>
            <returns>将对象复制成全新的对象，且不互相影响</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.YJMerge``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            YJ版本：合并两个集合的函数-不允许有重复项
            </summary>
            <param name="list1">第一个集合</param>
            <param name="list2">第二个集合</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.Distinct``1(System.Collections.Generic.List{``0})">
            <summary>
            集合去重
            </summary>
            <param name="list">集合</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelp.DistinctAsync``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
             <summary>
             异步根据指定字段去重，生成全新且不扰动原集合的去重List
             </summary>
             <typeparam name="T">集合元素类型</typeparam>
             <typeparam name="TKey">唯一性字段类型（可为单字段、匿名类型、元组等）</typeparam>
             <param name="list">待去重的集合</param>
             <param name="keySelector">唯一性字段选择器（如：item => item.Key，或 item => new { item.Key, item.Name }）</param>
             <returns>去重后的新集合（原集合不变）</returns>
             <remarks>
             优势：
             1. 支持任意字段或字段组合去重，灵活性极高，满足复杂业务唯一性需求。
             2. 不修改原集合，返回全新List，安全无副作用，线程安全。
             3. 泛型实现，适用于任何类型的List，支持匿名类型、元组等多字段组合。
             4. 性能高，基于HashSet实现，O(n)复杂度，适合大数据量。
             5. 异步实现，适合Web、服务端等需要避免阻塞主线程的场景。
            
             使用场景：
             - 需要根据业务唯一性规则（如单字段或多字段）去重的场景。
             - 需要保留原集合不变，生成新集合的场景。
             - 适用于实体对象、DTO、ViewModel等各种类型。
             - 数据导入、批量处理、接口返回前的去重。
            
             使用方法示例：
             var newList = await DistinctByFieldsAsync(list, x => x.Key); // 单字段
             var newList = await DistinctByFieldsAsync(list, x => new { x.Key, x.Name }); // 多字段
             var newList = await DistinctByFieldsAsync(list, x => Tuple.Create(x.Key, x.Name)); // 多字段（元组）
             </remarks>
        </member>
        <member name="T:YellowJHelp.IServer.IYJHelpCache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpCache.TryGetValue(System.String,System.String@)">
            <summary>
            判断指定Key是否存在，并返回对应的字符串值
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">输出参数，存在时返回对应值</param>
            <returns>存在返回true，否则false</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpCache.TryGetValue``1(System.String,``0@)">
            <summary>
            判断指定Key是否存在，并返回对应的泛型值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="key">缓存Key</param>
            <param name="value">输出参数，存在时返回对应值</param>
            <returns>存在且类型匹配返回true，否则false</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpCache.TryGetValue(System.String)">
            <summary>
            判断指定Key是否存在
            </summary>
            <param name="key">缓存Key</param>
            <returns>存在返回true，否则false</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpCache.Get(System.String)">
            <summary>
            获取指定Key的缓存对象（支持任意类型）
            </summary>
            <param name="key">缓存Key</param>
            <returns>缓存对象，未命中返回null</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpCache.Get``1(System.String)">
            <summary>
            泛型获取缓存对象，类型安全
            </summary>
            <typeparam name="T">期望返回的类型</typeparam>
            <param name="key">缓存Key</param>
            <returns>缓存对象，未命中返回默认值</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpCache.Set(System.String,System.String,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)">
            <summary>
            写入缓存（支持过期策略，返回写入的字符串值）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存值（string）</param>
            <param name="options">缓存项配置（过期时间、优先级等）</param>
            <returns>写入的字符串值</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpCache.Set``1(System.String,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)">
            <summary>
            泛型写入缓存（支持任意类型，支持过期策略）
            </summary>
            <typeparam name="T">缓存值类型</typeparam>
            <param name="key">缓存Key</param>
            <param name="value">缓存值</param>
            <param name="options">缓存项配置</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpCache.Remove(System.String)">
            <summary>
            移除指定Key的缓存项
            </summary>
            <param name="key">缓存Key</param>
        </member>
        <member name="T:YellowJHelp.IServer.IYJHelpKafka">
            <summary>
            Kafka链接通用方法
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpKafka.Produce(System.String,System.String,System.String)">
            <summary>
            发布者
            </summary>
            <param name="theme">主题</param>
            <param name="json">数据</param>
            <param name="BS">kafka连接地址</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpKafka.Produce(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            发布者-随机分区
            </summary>
            <param name="theme">主题</param>
            <param name="json">数据</param>
            <param name="BS">kafka连接地址</param>
            <param name="start">分区起始值：0</param>
            <param name="end">分区结束值：0</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpKafka.ProduceAdmin(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发布者（带账号密码）
            </summary>
            <param name="theme">主题</param>
            <param name="json">数据</param>
            <param name="BS">kafka连接地址</param>
            <param name="name">账号</param>
            <param name="pwd">密码</param>
            <param name="skey"></param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpKafka.ProduceAdminPartition(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            发布者-随机分区（带账号密码）
            </summary>
            <param name="theme">主题</param>
            <param name="json">数据</param>
            <param name="BS">kafka连接地址</param>
            <param name="name">账号</param>
            <param name="pwd">密码</param>
            <param name="skey"></param>
            <param name="start">分区起始值：0</param>
            <param name="end">分区结束值：0</param>
        </member>
        <member name="T:YellowJHelp.IServer.IYJHelpRedis">
            <summary>
            redis通用使用
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.RedisCli(System.String)">
            <summary>
            redis 配置中心
            </summary>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.Get``1(System.String)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.GetList``1(System.String)">
            <summary>
            获取列表List
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.Set``1(System.String,``0,System.Int32)">
            <summary>
            写入单项实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <param name="enety">值</param>
            <param name="expire">过期时间，秒。小于0时采用默认缓存时间NewLife.Caching.Cache.Expire</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.Add``1(System.String,``0,System.Int32)">
            <summary>
            添加，已存在时不更新
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <param name="enety">值</param>
            <param name="expire">过期时间，秒。小于0时采用默认缓存时间NewLife.Caching.Cache.Expire</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.ListSetW``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            写入集合：尾部增加
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <param name="enety">值</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.ListSetT``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            写入集合：头部增加
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <param name="enety">值</param>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.Clear">
            <summary>
            清空所有缓存项
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.Remove(System.String[])">
            <summary>
            清空所有缓存项
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.GetExpire(System.String)">
            <summary>
            获取缓存项有效期
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.ContainsKey(System.String)">
            <summary>
            是否存在
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.Count">
            <summary>
            缓存个数
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpRedis.SCARD(System.String)">
            <summary>
            返回集合个数
            </summary>
        </member>
        <member name="T:YellowJHelp.IServer.IYJHelpSql">
            <summary>
            数据库通用方法（测试）
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpSql.SqlApiLog(YellowJHelp.Entry.LogInfo)">
            <summary>
            数据库日志记录
            </summary>
        </member>
        <member name="T:YellowJHelp.IServer.IYJHelpT`1">
            <summary>
            通用方法(范型)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpT`1.Distinct(System.Collections.Generic.List{`0})">
            <summary>
            集合去重
            </summary>
            <param name="list">集合</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpT`1.YJMerge(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            YJ版本：合并两个集合的函数-不允许有重复项
            </summary>
            <param name="list1">第一个集合</param>
            <param name="list2">第二个集合</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpT`1.SpliteSourceBySize(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            将集合按条数分
            </summary>
            <param name="source">数据集</param>
            <param name="pageSiez">每一组数量条</param>
            <returns>将集合按照pageSiez拆分数</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpT`1.SpliteSourceByCount(System.Collections.Generic.List{`0},System.Int32)">
            <summary> 
            将集合分组
            </summary> 
            <param name="source">数据集</param> 
            <param name="count">组数</param> 
            <returns>将集合按照count分组</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpT`1.DistinctList(System.Collections.Generic.List{`0})">
            <summary>
            集合去重(哈西,只针对数值类型)
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpT`1.Merge(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            合并两个集合的函数-不允许有重复项
            </summary>
            <param name="list1">第一个集合</param>
            <param name="list2">第二个集合</param>
            <returns>返回第union的合并结果</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpT`1.MergeC(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            合并两个集合的函数-允许出现重复项
            </summary>
            <param name="list1">第一个集合</param>
            <param name="list2">第二个集合</param>
            <returns>返回第union的合并结果</returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpT`1.DiffsetT(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取差集（集合）
            </summary>
            <param name="left">左边的数据</param>
            <param name="right">右边的数据</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpT`1.Copy(`0)">
            <summary>
            对象副本
            </summary>
            <param name="data">数据</param>
            <returns>将对象复制成全新的对象，且不互相影响</returns>
        </member>
        <member name="T:YellowJHelp.IServer.IYJHelpWebApi">
            <summary>
            接口调用方法
            </summary>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpWebApi.HttpGetAsync(System.String)">
            <summary>
            调用接口方法get
            </summary>
            <param name="url">地址</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpWebApi.HttpGetAsync(System.String,System.Collections.Generic.List{YellowJAutoInjection.Entry.KeyValueInfo{System.String,System.String}})">
            <summary>
            调用接口方法get
            </summary>
            <param name="url">地址</param>
            <param name="keyValues">请求头</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpWebApi.HttPostAsync(System.String,System.String)">
            <summary>
            调用接口方法Post
            </summary>
            <param name="url">地址</param>
            <param name="Jsoncontent">参数</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpWebApi.HttPostAsync(System.String,System.String,System.Collections.Generic.List{YellowJAutoInjection.Entry.KeyValueInfo{System.String,System.String}})">
            <summary>
            调用接口方法Post
            </summary>
            <param name="url">地址</param>
            <param name="Jsoncontent">参数</param>
            <param name="keyValues">请求头</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.IServer.IYJHelpWebApi.HttHeadersPostAsync(System.String,System.String,System.Net.WebHeaderCollection)">
            <summary>
            调用接口方法Post（新增head头）
            </summary>
            <param name="url">地址</param>
            <param name="Jsoncontent">参数</param>
            <param name="webHeaderCollection">head</param>
            <returns></returns>
        </member>
        <member name="T:YellowJHelp.YJHelp">
            <summary>
            通用帮助方法
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelp.message">
            <summary>
            消息注明
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelp.MD5EncryptAsync(System.String,System.Boolean)">
            <summary>
            32位MD5加密
            </summary>
            <param name="strText">要加密的字符串</param>
            <param name="isLower">是否以小写方式返回（true：小写，false：大写）</param>
            <returns>加密后的32位MD5字符串</returns>
            <remarks>
            1. 支持异步，避免主线程阻塞，适合Web和高并发场景。
            2. 输入为空时返回空字符串，安全防护。
            3. 结果可选大小写，默认补齐32位。
            4. 使用using自动释放资源，防止内存泄漏。
            5. 推荐仅用于数据校验、签名等场景，不建议用于高安全场景的密码存储。
            </remarks>
        </member>
        <member name="M:YellowJHelp.YJHelp.EncodeAsync(System.String,System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="data">需要加密的值</param>
            <param name="KEY_64">密钥长度8位</param>
            <param name="IV_64">密钥长度8位</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.DecodeAsync(System.String,System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="data">需要加密的值</param>
            <param name="KEY_64">密钥长度8位</param>
            <param name="IV_64">密钥长度8位</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.YJSha256Async(System.String)">
            <summary>
            SHA256哈希加密（异步，返回64位小写十六进制字符串）
            </summary>
            <param name="text">要加密的字符串</param>
            <returns>SHA256哈希值（64位小写十六进制字符串）</returns>
            <remarks>
            1. 适用于数据签名、完整性校验等场景。
            2. 不可逆，仅用于校验和签名，不可解密。
            3. 异步实现，适合Web和高并发场景。
            </remarks>
        </member>
        <member name="M:YellowJHelp.YJHelp.YJAesEncryptAsync(System.String,System.String,System.String)">
            <summary>
            AES加密（异步，CBC模式，PKCS7填充，返回Base64字符串）
            </summary>
            <param name="plainText">明文</param>
            <param name="key">密钥（16/24/32字节，建议32字节）</param>
            <param name="iv">初始向量（16字节）</param>
            <returns>加密后的Base64字符串</returns>
            <remarks>
            1. 支持AES-128/192/256，key长度分别为16/24/32字节。
            2. IV必须为16字节，建议随机生成并安全保存。
            3. 适用于敏感数据加密传输、存储等场景。
            4. 异步实现，适合Web和高并发场景。
            </remarks>
        </member>
        <member name="M:YellowJHelp.YJHelp.YJAesDecryptAsync(System.String,System.String,System.String)">
            <summary>
            AES解密（异步，CBC模式，PKCS7填充，输入Base64字符串）
            </summary>
            <param name="cipherText">密文（Base64字符串）</param>
            <param name="key">密钥（16/24/32字节，建议32字节）</param>
            <param name="iv">初始向量（16字节）</param>
            <returns>解密后的明文</returns>
            <remarks>
            1. 密钥和IV需与加密时一致。
            2. 解密失败返回空字符串。
            3. 异步实现，适合Web和高并发场景。
            </remarks>
        </member>
        <member name="T:YellowJHelp.YJHelp.Cache">
            <summary>
            缓存类
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelp.Cache.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelp.Cache.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelp.Cache.Exsits(System.String)">
            <summary>
            判断缓存是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.Cache.Clear(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:YellowJHelp.YJHelp.Cache.Clear">
            <summary>
            删除所有
            </summary>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.YellowJLogAsync(System.String,System.String,System.String,System.String)">
            <summary>
            日志（支持自动分目录、按天分文件、UTF-8带BOM编码，便于扩展）
            </summary>
            <param name="text">日志内容</param>
            <param name="address">日志分类/相对目录（如"System"、"业务模块"）</param>
            <param name="logLevel">日志级别（可选，默认Info）</param>
            <param name="customFileName">自定义文件名（可选，默认按日期）</param>
            <returns></returns>
            <remarks>
            1. 自动在应用根目录下创建 YellowJ_Logs/分类目录，便于日志分模块管理。
            2. 日志文件按天分割，便于归档和查找。
            3. 支持自定义日志级别（如Info、Warn、Error等），便于后续扩展。
            4. 支持自定义文件名，满足特殊场景需求。
            5. 使用UTF-8带BOM编码，兼容主流编辑器。
            6. 异步写入，避免阻塞主线程。
            </remarks>
        </member>
        <member name="M:YellowJHelp.YJHelp.MidStrExAsync(System.String,System.String,System.String)">
            <summary>
            字段截取
            </summary>
            <param name="sourse">值</param>
            <param name="startstr">前字符</param>
            <param name="endstr">后字符</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.SetCookies(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,System.Int32)">
            <summary>
            设置本地cookie
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="key">键</param>
            <param name="value">值</param>  
            <param name="minutes">过期时长，单位：分钟</param>      
        </member>
        <member name="M:YellowJHelp.YJHelp.DeleteCookies(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            删除指定的cookie
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="key">键</param>
        </member>
        <member name="M:YellowJHelp.YJHelp.GetCookies(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            获取cookies
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="key">键</param>
            <returns>返回对应的值</returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.SessionAdd(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Byte[])">
            <summary>
            添加Session
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValue">Session值</param>
        </member>
        <member name="M:YellowJHelp.YJHelp.SessionGet(Microsoft.AspNetCore.Http.HttpContext,System.Threading.CancellationToken)">
            <summary>
            获取Session
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:YellowJHelp.YJHelp.SessionDel(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            删除Session
            </summary>
            <param name="ctx">Microsoft.AspNetCore.Http</param>
            <param name="strSessionName">Session对象名称</param>
        </member>
        <member name="M:YellowJHelp.YJHelp.IsString(System.String,System.String)">
            <summary>
            string中是否包含某个值
            </summary>
            <param name="data">数据包</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.YAlloctionlist(System.Collections.Generic.List{YellowJHelp.Entry.YAllocationInfo},System.Collections.Generic.List{YellowJHelp.Entry.YAllocationInfo})">
            <summary>
            分配数据（单线程版）
            </summary>
            <param name="yAllocations">分配集合（资源池，每项Key唯一，RemQty为可分配剩余量）</param>
            <param name="yAllocations1">被分配集合（需求池，每项Key唯一，AQty为已分配量）</param>
            <returns>
            List[0]：分配集合（分配后剩余资源）
            List[1]：被分配集合（分配后已分配量）
            List[2]：分配明细（每次分配的详细记录）
            </returns>
            <remarks>
            1. 以Key为分组依据，将资源池与需求池按Key一一对应。
            2. 需求池每项依次尝试从资源池分配，优先分配RemQty充足的资源。
            3. 分配优先满足需求，资源池RemQty不足时可多次分配直至满足或资源耗尽。
            4. 分配明细记录每次分配的来源、数量、目标等，便于追溯。
            5. 返回分配后资源池、需求池和分配明细，便于后续业务处理。
            </remarks>
        </member>
        <member name="M:YellowJHelp.YJHelp.YAlloctionlistThred(System.Collections.Generic.List{YellowJHelp.Entry.YAllocationInfo},System.Collections.Generic.List{YellowJHelp.Entry.YAllocationInfo})">
            <summary>
            分配数据-多线程优化版
            </summary>
            <param name="yAllocations">分配集合（资源池，每项Key唯一，RemQty为可分配剩余量）</param>
            <param name="yAllocations1">被分配集合（需求池，每项Key唯一，AQty为已分配量）</param>
            <returns>
            List[0]：分配集合（分配后剩余资源）
            List[1]：被分配集合（分配后已分配量）
            List[2]：分配明细（每次分配的详细记录）
            </returns>
            <remarks>
            1. 按Key分组，将资源池和需求池的同Key分组配对，形成并行分配任务。
            2. 每个Key分组独立分配，互不影响，适合大数据量、Key分布均匀场景。
            3. 内部调用单线程分配方法，保证每组分配逻辑一致。
            4. 结果采用线程安全集合（ConcurrentBag）收集，避免多线程冲突。
            5. 返回结构与单线程版一致，便于统一处理。
            6. 注意：如需全局唯一性或跨Key分配，需单线程或加锁处理。
            </remarks>
        </member>
        <member name="M:YellowJHelp.YJHelp.NextId(System.Int64)">
            <summary>
            生成雪花ID
            </summary>
            <param name="workerId">工作者的标识</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.IsDateInTargetMonth(System.DateTime,System.DateTime)">
            <summary>
            日期是否在目标年月内
            </summary>
            <param name="date">输入日期</param>
            <param name="targetDate">目标日期</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.Copy``1(``0)">
            <summary>
            对象副本
            </summary>
            <param name="data">数据</param>
            <returns>将对象复制成全新的对象，且不互相影响</returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.YJMerge``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            YJ版本：合并两个集合的函数-不允许有重复项
            </summary>
            <param name="list1">第一个集合</param>
            <param name="list2">第二个集合</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.Distinct``1(System.Collections.Generic.List{``0})">
            <summary>
            集合去重
            </summary>
            <param name="list">集合</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelp.DistinctAsync``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
             <summary>
             根据指定字段去重，生成全新且不扰动原集合的去重List
             </summary>
             <typeparam name="T">集合元素类型</typeparam>
             <typeparam name="TKey">唯一性字段类型（可为单字段、匿名类型、元组等）</typeparam>
             <param name="list">待去重的集合</param>
             <param name="keySelector">唯一性字段选择器（如：item => item.Key，或 item => new { item.Key, item.Name }）</param>
             <returns>去重后的新集合（原集合不变）</returns>
             <remarks>
             优势：
             1. 支持任意字段或字段组合去重，灵活性极高，满足复杂业务唯一性需求。
             2. 不修改原集合，返回全新List，安全无副作用，线程安全。
             3. 泛型实现，适用于任何类型的List，支持匿名类型、元组等多字段组合。
             4. 性能高，基于HashSet实现，O(n)复杂度，适合大数据量。
             5. 异步实现，适合Web、服务端等需要避免阻塞主线程的场景。
            
             使用场景：
             - 需要根据业务唯一性规则（如单字段或多字段）去重的场景。
             - 需要保留原集合不变，生成新集合的场景。
             - 适用于实体对象、DTO、ViewModel等各种类型。
             - 数据导入、批量处理、接口返回前的去重。
            
             使用方法示例：
             var newList = await DistinctByFieldsAsync(list, x => x.Key); // 单字段
             var newList = await DistinctByFieldsAsync(list, x => new { x.Key, x.Name }); // 多字段
             var newList = await DistinctByFieldsAsync(list, x => Tuple.Create(x.Key, x.Name)); // 多字段（元组）
             </remarks>
        </member>
        <member name="M:YellowJHelp.YJHelp.ToDictAsync``2(System.Collections.Generic.List{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            将List集合根据指定键选择器生成字典，便于快速查找
            </summary>
            <typeparam name="TSource">集合元素类型</typeparam>
            <typeparam name="TKey">字典Key类型</typeparam>
            <param name="list">要转换的集合</param>
            <param name="keySelector">用于获取Key的委托（如：item => item.Key）</param>
            <param name="allowDuplicate">是否允许重复Key（true时后者覆盖前者，false时遇到重复抛异常）</param>
            <returns>以指定Key为键的字典</returns>
            <exception cref="T:System.ArgumentNullException">参数为空时抛出</exception>
            <exception cref="T:System.ArgumentException">存在重复Key且不允许重复时抛出,默认允许重复</exception>
        </member>
        <member name="M:YellowJHelp.YJHelp.ToDictAsync``2(System.Collections.Generic.List{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)">
            <summary>
            将List集合根据指定集合Key选择器生成字典，支持Key为集合类型（如List&lt;string&gt;），便于快速查找
            </summary>
            <typeparam name="TSource">集合元素类型</typeparam>
            <typeparam name="TKeyItem">集合Key的元素类型</typeparam>
            <param name="list">要转换的集合</param>
            <param name="keySelector">用于获取集合Key的委托（如：item => item.Number）</param>
            <param name="allowDuplicate">是否允许重复Key（true时后者覆盖前者，false时遇到重复抛异常）</param>
            <returns>以集合Key为键的字典（Key为集合的唯一字符串表示）</returns>
            <exception cref="T:System.ArgumentNullException">参数为空时抛出</exception>
            <exception cref="T:System.ArgumentException">存在重复Key且不允许重复时抛出，默认允许重复</exception>
        </member>
        <member name="M:YellowJHelp.Server.YJHelpCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            构造函数，注入IMemoryCache实例
            </summary>
            <param name="memoryCache">内存缓存实例</param>
        </member>
        <member name="M:YellowJHelp.Server.YJHelpCache.TryGetValue``1(System.String,``0@)">
            <summary>
            判断指定Key是否存在，并返回对应的泛型值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="key">缓存Key</param>
            <param name="value">输出参数，存在时返回对应值</param>
            <returns>存在且类型匹配返回true，否则false</returns>
        </member>
        <member name="M:YellowJHelp.Server.YJHelpCache.TryGetValue(System.String)">
            <summary>
            判断指定Key是否存在
            </summary>
            <param name="key">缓存Key</param>
            <returns>存在返回true，否则false</returns>
        </member>
        <member name="M:YellowJHelp.Server.YJHelpCache.TryGetValue(System.String,System.String@)">
            <summary>
            判断指定Key是否存在，并返回对应的字符串值
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">输出参数，存在时返回对应值</param>
            <returns>存在返回true，否则false</returns>
        </member>
        <member name="M:YellowJHelp.Server.YJHelpCache.Get(System.String)">
            <summary>
            获取指定Key的缓存对象（支持任意类型）
            </summary>
            <param name="key">缓存Key</param>
            <returns>缓存对象，未命中返回null</returns>
        </member>
        <member name="M:YellowJHelp.Server.YJHelpCache.Get``1(System.String)">
            <summary>
            泛型获取缓存对象，类型安全
            </summary>
            <typeparam name="T">期望返回的类型</typeparam>
            <param name="key">缓存Key</param>
            <returns>缓存对象，未命中返回默认值</returns>
        </member>
        <member name="M:YellowJHelp.Server.YJHelpCache.Set(System.String,System.String,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)">
            <summary>
            写入缓存（支持过期策略，返回写入的字符串值）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存值（string）</param>
            <param name="options">缓存项配置（过期时间、优先级等）</param>
            <returns>写入的字符串值</returns>
        </member>
        <member name="M:YellowJHelp.Server.YJHelpCache.Set``1(System.String,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)">
            <summary>
            泛型写入缓存（支持任意类型，支持过期策略）
            </summary>
            <typeparam name="T">缓存值类型</typeparam>
            <param name="key">缓存Key</param>
            <param name="value">缓存值</param>
            <param name="options">缓存项配置</param>
        </member>
        <member name="M:YellowJHelp.Server.YJHelpCache.Remove(System.String)">
            <summary>
            移除指定Key的缓存项
            </summary>
            <param name="key">缓存Key</param>
        </member>
        <member name="T:YellowJHelp.YJHelpKafka">
            <summary>
            Kafka链接通用方法
            </summary>
        </member>
        <member name="F:YellowJHelp.YJHelpKafka._Help">
            <summary>
            帮助接口
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelpKafka.#ctor(YellowJHelp.IServer.IYJHelp)">
            <summary>
            构造函数
            </summary>
            <param name="yJHelp"></param>
        </member>
        <member name="M:YellowJHelp.YJHelpKafka.Produce(System.String,System.String,System.String)">
            <summary>
            发布者
            </summary>
            <param name="theme">主题</param>
            <param name="json">数据</param>
            <param name="BS">kafka连接地址</param>
        </member>
        <member name="M:YellowJHelp.YJHelpKafka.Produce(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            发布者-随机分区
            </summary>
            <param name="theme">主题</param>
            <param name="json">数据</param>
            <param name="BS">kafka连接地址</param>
            <param name="start">分区起始值：0</param>
            <param name="end">分区结束值：0</param>
        </member>
        <member name="M:YellowJHelp.YJHelpKafka.ProduceAdmin(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发布者（带账号密码）
            </summary>
            <param name="theme">主题</param>
            <param name="json">数据</param>
            <param name="BS">kafka连接地址</param>
            <param name="name">账号</param>
            <param name="pwd">密码</param>
            <param name="skey"></param>
        </member>
        <member name="M:YellowJHelp.YJHelpKafka.ProduceAdminPartition(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            发布者-随机分区（带账号密码）
            </summary>
            <param name="theme">主题</param>
            <param name="json">数据</param>
            <param name="BS">kafka连接地址</param>
            <param name="name">账号</param>
            <param name="pwd">密码</param>
            <param name="skey"></param>
            <param name="start">分区起始值：0</param>
            <param name="end">分区结束值：0</param>
        </member>
        <member name="T:YellowJHelp.YJHelpRedis">
            <summary>
            redis通用使用
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.RedisCli(System.String)">
            <summary>
            redis 配置中心
            </summary>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.Get``1(System.String)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.GetList``1(System.String)">
            <summary>
            获取列表List
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.Set``1(System.String,``0,System.Int32)">
            <summary>
            写入单项实体
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <param name="enety">值</param>
            <param name="expire">过期时间，秒。小于0时采用默认缓存时间NewLife.Caching.Cache.Expire</param>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.Add``1(System.String,``0,System.Int32)">
            <summary>
            添加，已存在时不更新
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <param name="enety">值</param>
            <param name="expire">过期时间，秒。小于0时采用默认缓存时间NewLife.Caching.Cache.Expire</param>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.ListSetW``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            写入集合：尾部增加
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <param name="enety">值</param>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.ListSetT``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            写入集合：头部增加
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="key">健</param>
            <param name="enety">值</param>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.Clear">
            <summary>
            清空所有缓存项
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.Remove(System.String[])">
            <summary>
            清空所有缓存项
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.GetExpire(System.String)">
            <summary>
            获取缓存项有效期
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.ContainsKey(System.String)">
            <summary>
            是否存在
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.Count">
            <summary>
            缓存个数
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelpRedis.SCARD(System.String)">
            <summary>
            返回集合个数
            </summary>
        </member>
        <member name="T:YellowJHelp.YJHelpSql">
            <summary>
            数据库通用方法（测试）
            </summary>
        </member>
        <member name="F:YellowJHelp.YJHelpSql.sqlconntion">
            <summary>
            sqlserver链接参数
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelpSql.SqlApiLog(YellowJHelp.Entry.LogInfo)">
            <summary>
            数据库日志记录
            </summary>
        </member>
        <member name="T:YellowJHelp.YJHelpT`1">
            <summary>
            通用方法(范型)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:YellowJHelp.YJHelpT`1.DistinctList(System.Collections.Generic.List{`0})">
            <summary>
            集合去重(哈西,只针对数值类型)
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelpT`1.Distinct(System.Collections.Generic.List{`0})">
            <summary>
            集合去重
            </summary>
            <param name="list">集合</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelpT`1.YJMerge(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            YJ版本：合并两个集合的函数-不允许有重复项
            </summary>
            <param name="list1">第一个集合</param>
            <param name="list2">第二个集合</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:YellowJHelp.YJHelpT`1.Merge(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            合并两个集合的函数-不允许有重复项
            </summary>
            <param name="list1">第一个集合</param>
            <param name="list2">第二个集合</param>
            <returns>返回第union的合并结果</returns>
        </member>
        <member name="M:YellowJHelp.YJHelpT`1.MergeC(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            合并两个集合的函数-允许出现重复项
            </summary>
            <param name="list1">第一个集合</param>
            <param name="list2">第二个集合</param>
            <returns>返回第union的合并结果</returns>
        </member>
        <member name="M:YellowJHelp.YJHelpT`1.DiffsetT(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取差集（集合）
            </summary>
            <param name="left">左边的数据</param>
            <param name="right">右边的数据</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelpT`1.Copy(`0)">
            <summary>
            对象副本
            </summary>
            <param name="data">数据</param>
            <returns>将对象复制成全新的对象，且不互相影响</returns>
        </member>
        <member name="T:YellowJHelp.YJHelpWebApi">
            <summary>
            接口调用方法
            </summary>
        </member>
        <member name="M:YellowJHelp.YJHelpWebApi.HttpGetAsync(System.String)">
            <summary>
            调用接口方法get
            </summary>
            <param name="url">地址</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelpWebApi.HttpGetAsync(System.String,System.Collections.Generic.List{YellowJAutoInjection.Entry.KeyValueInfo{System.String,System.String}})">
            <summary>
            调用接口方法get
            </summary>
            <param name="url">地址</param>
            <param name="keyValues">请求头</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelpWebApi.HttPostAsync(System.String,System.String)">
            <summary>
            调用接口方法Post
            </summary>
            <param name="url">地址</param>
            <param name="Jsoncontent">参数</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelpWebApi.HttPostAsync(System.String,System.String,System.Collections.Generic.List{YellowJAutoInjection.Entry.KeyValueInfo{System.String,System.String}})">
            <summary>
            调用接口方法Post
            </summary>
            <param name="url">地址</param>
            <param name="Jsoncontent">参数</param>
            <param name="keyValues">请求头</param>
            <returns></returns>
        </member>
        <member name="M:YellowJHelp.YJHelpWebApi.HttHeadersPostAsync(System.String,System.String,System.Net.WebHeaderCollection)">
            <summary>
            调用接口方法Post（新增head头）
            </summary>
            <param name="url">地址</param>
            <param name="Jsoncontent">参数</param>
            <param name="webHeaderCollection">head</param>
            <returns></returns>
        </member>
    </members>
</doc>
